rattle::fancyRpartPlot(fastball$fit, main = "What Makes a Fastball Good")
# q<- qnorm(mean = mean(testVec), sd = sd(testVec),p= seq(.001, .999, 1 / 13))
# ggplot(data = as.data.frame(testVec)%>%sample(100000), aes(x = testVec))+geom_density()
testVec <- aggregate$final_pred
q <- vector()
q[1] <- mean(testVec) + sd(testVec) * 2.25 # F
q[2] <- mean(testVec) + sd(testVec) * 1.75 # D-
q[3] <- mean(testVec) + sd(testVec) * 1.5 # D
q[4] <- mean(testVec) + sd(testVec) * 1.25 # D+
q[5] <- mean(testVec) + sd(testVec) * .75 # C-
q[6] <- mean(testVec) + sd(testVec) * .5 # C
q[7] <- mean(testVec) # C+
q[8] <- mean(testVec) - sd(testVec) * .5 # B-
q[9] <- mean(testVec) - sd(testVec) * .75 # B
q[10] <- mean(testVec) - sd(testVec) * 1.25 # B+
q[11] <- mean(testVec) - sd(testVec) * 1.5 # A-
q[12] <- mean(testVec) - sd(testVec) * 1.75 # A
q[13] <- mean(testVec) - sd(testVec) * 2 # A+
aggregate <- aggregate %>% mutate(grade = ifelse(final_pred < q[2], "F", ifelse(final_pred < q[3], "D-", ifelse(final_pred < q[4], "D", ifelse(final_pred < q[5], "D+", ifelse(final_pred < q[6], "C-", ifelse(final_pred < q[7], "C", ifelse(final_pred < q[8], "C+", ifelse(final_pred < q[9], "B-", ifelse(final_pred < q[10], "B", ifelse(final_pred < q[11], "B+", ifelse(final_pred < q[12], "A-", ifelse(final_pred < q[13], "A", "A+")))))))))))))
table(aggregate$grade)
f1 <- rattle::fancyRpartPlot(fastball$fit, main = "What Makes a Fastball Good (wOBA)")
fastball2 <- parsnip::decision_tree(mode = "classification") %>%
set_engine("rpart", control = rpart.control(cp = 0.005, minbucket = 10, maxdepth = 10)) %>%
fit(as.factor(grade) ~ ., data = left_join(aggregate, some_pitches %>% select(pitch_type, vx0, vy0)) %>% filter(pitch_type == "FF") %>% select(release_speed:wOBA, grade, -pfx_z, -release_pos_z, -release_extension, -vx0))
f2 <- rattle::fancyRpartPlot(fastball2$fit, main = "What Makes a Fastball Good (grades)")
# cowplot::plot_grid(f1,f2)
# predicted_wOBAs <- left_join(inner_join(some_pitches,aggregate)%>% group_by(pitcher, pitch_type) %>% summarise(actual_wOBA = mean(wOBA), predicted_wOBA = mean(final_pred), pitch_count = n()),names, by = c("pitcher"="key_mlbam"))%>%mutate(differential = actual_wOBA-predicted_wOBA)%>%filter(pitch_count >= 100)
# save(predicted_wOBAs, file = "predWoba.rda")
load("predWoba.rda")
testVec2 <- predicted_wOBAs$predicted_wOBA
q2 <- vector()
q2[1] <- mean(testVec2) + sd(testVec2) * 2.25 # F
q2[2] <- mean(testVec2) + sd(testVec2) * 1.75 # D-
q2[3] <- mean(testVec2) + sd(testVec2) * 1.5 # D
q2[4] <- mean(testVec2) + sd(testVec2) * 1.25 # D+
q2[5] <- mean(testVec2) + sd(testVec2) * .75 # C-
q2[6] <- mean(testVec2) + sd(testVec2) * .5 # C
q2[7] <- mean(testVec2) # C+
q2[8] <- mean(testVec2) - sd(testVec2) * .5 # B-
q2[9] <- mean(testVec2) - sd(testVec2) * .75 # B
q2[10] <- mean(testVec2) - sd(testVec2) * 1.25 # B+
q2[11] <- mean(testVec2) - sd(testVec2) * 1.5 # A-
q2[12] <- mean(testVec2) - sd(testVec2) * 1.75 # A
q2[13] <- mean(testVec2) - sd(testVec2) * 2 # A+
predicted_wOBAs <- predicted_wOBAs %>% mutate(grade = ifelse(predicted_wOBA < q2[2], "F", ifelse(predicted_wOBA < q2[3], "D-", ifelse(predicted_wOBA < q2[4], "D", ifelse(predicted_wOBA < q2[5], "D+", ifelse(predicted_wOBA < q2[6], "C-", ifelse(predicted_wOBA < q2[7], "C", ifelse(predicted_wOBA < q2[8], "C+", ifelse(predicted_wOBA < q2[9], "B-", ifelse(predicted_wOBA < q2[10], "B", ifelse(predicted_wOBA < q2[11], "B+", ifelse(predicted_wOBA < q2[12], "A-", ifelse(predicted_wOBA < q2[13], "A", "A+")))))))))))))
cor(x = predicted_wOBAs$actual_wOBA, predicted_wOBAs$predicted_wOBA)
ggplot(predicted_wOBAs %>% drop_na(), aes(col = pitch_type, x = predicted_wOBA, y = actual_wOBA)) +
geom_point() +
geom_abline() +
ggrepel::geom_label_repel(aes(label = name), max.overlaps = 7, box.padding = .1)
fastball2 <- parsnip::decision_tree(mode = "classification") %>%
set_engine("rpart", control = rpart.control(cp = 0.005, minbucket = 10, maxdepth = 10)) %>%
fit(as.factor(grade) ~ ., data = left_join(aggregate, some_pitches %>% select(pitch_type, vx0, vy0)) %>% filter(pitch_type == "FF") %>% select(release_speed:wOBA, grade))
View(predicted_wOBAs)
testVec2 <- predicted_wOBAs$predicted_wOBA
q2 <- vector()
q2[1] <- mean(testVec2) + sd(testVec2) * 2.25 # F
q2[2] <- mean(testVec2) + sd(testVec2) * 1.75 # D-
q2[3] <- mean(testVec2) + sd(testVec2) * 1.5 # D
q2[4] <- mean(testVec2) + sd(testVec2) * 1.25 # D+
q2[5] <- mean(testVec2) + sd(testVec2) * .75 # C-
q2[6] <- mean(testVec2) + sd(testVec2) * .5 # C
q2[7] <- mean(testVec2) # C+
q2[8] <- mean(testVec2) - sd(testVec2) * .5 # B-
q2[9] <- mean(testVec2) - sd(testVec2) * .75 # B
q2[10] <- mean(testVec2) - sd(testVec2) * 1.25 # B+
q2[11] <- mean(testVec2) - sd(testVec2) * 1.5 # A-
q2[12] <- mean(testVec2) - sd(testVec2) * 1.75 # A
q2[13] <- mean(testVec2) - sd(testVec2) * 2 # A+
predicted_wOBAs <- predicted_wOBAs %>% mutate(grade = ifelse(predicted_wOBA < q2[2], "F", ifelse(predicted_wOBA < q2[3], "D-", ifelse(predicted_wOBA < q2[4], "D", ifelse(predicted_wOBA < q2[5], "D+", ifelse(predicted_wOBA < q2[6], "C-", ifelse(predicted_wOBA < q2[7], "C", ifelse(predicted_wOBA < q2[8], "C+", ifelse(predicted_wOBA < q2[9], "B-", ifelse(predicted_wOBA < q2[10], "B", ifelse(predicted_wOBA < q2[11], "B+", ifelse(predicted_wOBA < q2[12], "A-", ifelse(predicted_wOBA < q2[13], "A", "A+")))))))))))))
cor(x = predicted_wOBAs$actual_wOBA, predicted_wOBAs$predicted_wOBA)
ggplot(predicted_wOBAs %>% drop_na(), aes(col = pitch_type, x = predicted_wOBA, y = actual_wOBA)) +
geom_point() +
geom_abline() +
ggrepel::geom_label_repel(aes(label = name), max.overlaps = 7, box.padding = .1)
predicted_wOBAs >- predicted_wOBAs %>% mutate(grade = ifelse(predicted_wOBA > q2[2], "F", ifelse(predicted_wOBA > q2[3], "D-", ifelse(predicted_wOBA > q2[4], "D", ifelse(predicted_wOBA > q2[5], "D+", ifelse(predicted_wOBA > q2[6], "C-", ifelse(predicted_wOBA > q2[7], "C", ifelse(predicted_wOBA > q2[8], "C+", ifelse(predicted_wOBA > q2[9], "B-", ifelse(predicted_wOBA > q2[10], "B", ifelse(predicted_wOBA > q2[11], "B+", ifelse(predicted_wOBA > q2[12], "A-", ifelse(predicted_wOBA > q2[13], "A", "A+")))))))))))))
predicted_wOBAs >- predicted_wOBAs %>% mutate(grade = ifelse(predicted_wOBA > q2[2], "F", ifelse(predicted_wOBA > q2[3], "D-", ifelse(predicted_wOBA > q2[4], "D", ifelse(predicted_wOBA > q2[5], "D+", ifelse(predicted_wOBA > q2[6], "C-", ifelse(predicted_wOBA > q2[7], "C", ifelse(predicted_wOBA > q2[8], "C+", ifelse(predicted_wOBA > q2[9], "B-", ifelse(predicted_wOBA > q2[10], "B", ifelse(predicted_wOBA > q2[11], "B+", ifelse(predicted_wOBA > q2[12], "A-", ifelse(predicted_wOBA > q2[13], "A", "A+")))))))))))))
q2[7] <- mean(testVec2) # C+
testVec2 <- predicted_wOBAs$predicted_wOBA
q2 <- vector()
q2[1] <- mean(testVec2) + sd(testVec2) * 2.25 # F
q2[2] <- mean(testVec2) + sd(testVec2) * 1.75 # D-
q2[3] <- mean(testVec2) + sd(testVec2) * 1.5 # D
q2[4] <- mean(testVec2) + sd(testVec2) * 1.25 # D+
q2[5] <- mean(testVec2) + sd(testVec2) * .75 # C-
q2[6] <- mean(testVec2) + sd(testVec2) * .5 # C
q2[7] <- mean(testVec2) # C+
q2[8] <- mean(testVec2) - sd(testVec2) * .5 # B-
q2[9] <- mean(testVec2) - sd(testVec2) * .75 # B
q2[10] <- mean(testVec2) - sd(testVec2) * 1.25 # B+
q2[11] <- mean(testVec2) - sd(testVec2) * 1.5 # A-
q2[12] <- mean(testVec2) - sd(testVec2) * 1.75 # A
q2[13] <- mean(testVec2) - sd(testVec2) * 2 # A+
predicted_wOBAs >- predicted_wOBAs %>% mutate(grade = ifelse(predicted_wOBA > q2[2], "F", ifelse(predicted_wOBA > q2[3], "D-", ifelse(predicted_wOBA > q2[4], "D", ifelse(predicted_wOBA > q2[5], "D+", ifelse(predicted_wOBA > q2[6], "C-", ifelse(predicted_wOBA > q2[7], "C", ifelse(predicted_wOBA > q2[8], "C+", ifelse(predicted_wOBA > q2[9], "B-", ifelse(predicted_wOBA > q2[10], "B", ifelse(predicted_wOBA > q2[11], "B+", ifelse(predicted_wOBA > q2[12], "A-", ifelse(predicted_wOBA > q2[13], "A", "A+")))))))))))))
predicted_wOBAs <- predicted_wOBAs %>% mutate(grade = ifelse(predicted_wOBA > q2[2], "F", ifelse(predicted_wOBA > q2[3], "D-", ifelse(predicted_wOBA > q2[4], "D", ifelse(predicted_wOBA > q2[5], "D+", ifelse(predicted_wOBA > q2[6], "C-", ifelse(predicted_wOBA > q2[7], "C", ifelse(predicted_wOBA > q2[8], "C+", ifelse(predicted_wOBA > q2[9], "B-", ifelse(predicted_wOBA > q2[10], "B", ifelse(predicted_wOBA > q2[11], "B+", ifelse(predicted_wOBA > q2[12], "A-", ifelse(predicted_wOBA > q2[13], "A", "A+")))))))))))))
aggregate <- aggregate %>% mutate(grade = ifelse(final_pred > q[2], "F", ifelse(final_pred > q[3], "D-", ifelse(final_pred > q[4], "D", ifelse(final_pred > q[5], "D+", ifelse(final_pred > q[6], "C-", ifelse(final_pred > q[7], "C", ifelse(final_pred > q[8], "C+", ifelse(final_pred > q[9], "B-", ifelse(final_pred > q[10], "B", ifelse(final_pred > q[11], "B+", ifelse(final_pred > q[12], "A-", ifelse(final_pred > q[13], "A", "A+")))))))))))))
fastball2 <- parsnip::decision_tree(mode = "classification") %>%
set_engine("rpart", control = rpart.control(cp = 0.005, minbucket = 10, maxdepth = 10)) %>%
fit(as.factor(grade) ~ ., data = left_join(aggregate, some_pitches %>% select(pitch_type, vx0, vy0)) %>% filter(pitch_type == "FF") %>% select(release_speed:wOBA, grade))
f2 <- rattle::fancyRpartPlot(fastball2$fit, main = "What Makes a Fastball Good (grades)")
fastball2 <- parsnip::decision_tree(mode = "classification") %>%
set_engine("rpart", control = rpart.control(cp = 0.005, minbucket = 10, maxdepth = 10)) %>%
fit(as.factor(grade) ~ ., data = left_join(aggregate, some_pitches %>% select(pitch_type, vx0, vy0,-pfx_z)) %>% filter(pitch_type == "FF") %>% select(release_speed:wOBA, grade))
fastball2 <- parsnip::decision_tree(mode = "classification") %>%
set_engine("rpart", control = rpart.control(cp = 0.005, minbucket = 10, maxdepth = 10)) %>%
fit(as.factor(grade) ~ ., data = left_join(aggregate, some_pitches %>% select(pitch_type, vx0, vy0,-pfx_z)) %>% filter(pitch_type == "FF") %>% select(release_speed:wOBA, grade))
f2 <- rattle::fancyRpartPlot(fastball2$fit, main = "What Makes a Fastball Good (grades)")
f2 <- rattle::fancyRpartPlot(fastball2$fit, main = "What Makes a Fastball Good (grades)")
fastball2 <- parsnip::decision_tree(mode = "classification") %>%
set_engine("rpart", control = rpart.control(cp = 0.005, minbucket = 10, maxdepth = 10)) %>%
fit(as.factor(grade) ~ ., data = left_join(aggregate, some_pitches %>% select(pitch_type, vx0, vy0)) %>% filter(pitch_type == "FF") %>% select(release_speed:wOBA, grade,-pfx_z))
f2 <- rattle::fancyRpartPlot(fastball2$fit, main = "What Makes a Fastball Good (grades)")
# packages
library(tidyverse)
tr.logit <- glm( am ~  wt, family = binomial,
data = mtcars)
tr.logit <- glm( am ~  wt, family = binomial,
data = mtcars)
tr.probit <- update( tr.logit, family=binomial(link="probit") )
tr.cll <- update( tr.logit, family=binomial(link="cloglog") )
tr.array <- rbind( coef(tr.logit), coef(tr.probit), coef(tr.cll))
tr.array <- cbind( tr.array, c(deviance(tr.logit),
deviance(tr.probit), deviance(tr.cll)) )
colnames(tr.array) <- c("Intercept", "Hours","Residual dev.")
rownames(tr.array) <- c("Logit","Probit","Comp log-log")
tr.array
tr.logit <- glm( am ~  wt, family = binomial,
data = mtcars)
tr.probit <- update( tr.logit, family=binomial(link="probit") )
tr.cll <- update( tr.logit, family=binomial(link="cloglog") )
tr.array <- rbind( coef(tr.logit), coef(tr.probit), coef(tr.cll))
tr.array <- cbind( tr.array, c(deviance(tr.logit),
deviance(tr.probit), deviance(tr.cll)) )
colnames(tr.array) <- c("Intercept", "Weight","Residual dev.")
rownames(tr.array) <- c("Logit","Probit","Comp log-log")
tr.array
newHrs <- seq( 0, 5000, length=100)
newdf <- data.frame(Hours=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
plot( am ~  wt,
data = mtcars, pch=19, las=1,
xlim=c(0, 5000), ylim=c(0, 0.7),
xlab="Hours run", ylab="Proportion with fissures")
newHrs <- seq( 0, 5000, length=100)
newdf <- data.frame(Hours=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newHrs <- seq( 0, 5000, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot( am ~  wt,
data = mtcars, pch=19, las=1,
xlim=c(0, 5000), ylim=c(0, 0.7),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("topleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
plot( am ~  wt,
data = mtcars,
xlim=c(0, 5000), ylim=c(0, 0.7),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
newHrs <- seq( 0, 5000, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot( am ~  wt,
data = mtcars,
xlim=c(0, 5000), ylim=c(0, 0.7),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("topleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
newHrs <- seq( 0, 5000, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 5000), ylim=c(0, 0.7),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("topleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
newHrs <- seq( -5000, 5000, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 5000), ylim=c(0, 0.7),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("topleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
plot(am ~  wt,
data = mtcars,
xlim=c(0, 5000), ylim=c(-10, 10),
xlab="Hours run", ylab="Proportion with fissures")
plot(am ~  wt,
data = mtcars,
xlim=c(-5000, 5000), ylim=c(-10, 10),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
newHrs <- seq( -5000, 5000, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(-5000, 5000), ylim=c(-10, 10),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("topleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
newHrs <- seq( -5000, 5000, length=10)
newHrs <- seq( -5000, 5000, length=1000)
newHrs <- seq( -5000, 5000, length=1000)
newdf <- data.frame(wt=newHrs)
newHrs <- seq( -5000, 5000, length=1000)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(-5000, 5000), ylim=c(-10, 10),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("topleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
View(newdf)
data(mtcars)
force(mtcars)
View(mtcars)
newHrs <- seq( 1, 6, length=100)
newHrs <- seq( 1, 6, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(-5000, 5000), ylim=c(-10, 10),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("topleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
data(mtcars)
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Hours run", ylab="Proportion with fissures")
# packages
library(tidyverse)
library(kableExtra)
# settings
knitr::opts_chunk$set(comment = " ")
theme_set(theme_classic())
newHrs <- seq( 1, 6, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("topleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
data(mtcars)
legend("bottomleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
newHrs <- seq( 1, 6, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("botleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
newHrs <- seq( 1, 6, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Hours run", ylab="Proportion with fissures")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("bottomleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
data(mtcars)
summary(model)
# packages
library(tidyverse)
library(kableExtra)
# settings
knitr::opts_chunk$set(comment = " ")
theme_set(theme_classic())
model <- glm(am ~  wt, family = binomial(link = "logit"),
data = mtcars)
summary(model)
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Weight (1000lbs)", ylab="Proportion of Manuel Cars")
newHrs <- seq( 1, 6, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Weight (1000lbs)", ylab="Proportion of Manuel Cars")
lines( newP.logit ~ newHrs, lty=1, lwd=2)
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("bottomleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
data(mtcars)
coef(tr.logit)
coef(tr.logit)
coef(tr.logit)[1]
coef(tr.logit)[2]
coef <- coef(tr.logit)[2]
coef
coef(tr.logit)[2]
exp(-4.02)
exp(-4.02*2)
coef(tr.logit)[2]
coef(tr.logit)
exp(12.04) + exp(-4.02)^3
exp(12.04) + exp(-4.02)^2
exp(12.04) + exp(-4.02)^2
exp(12.04) + exp(-4.02)^1
exp(12.04) + exp(-4.02)^1
exp(12.04) + exp(-4.02)^0
exp(12.04) + exp(-4.02)^.05
coef(tr.logit)
model_logit
model_logit <- glm(am ~  wt, family = binomial(link = "logit"),
data = mtcars)
summary(model_logit)
coef(model_logit)
exp(12.04) + exp(-4.02)^.05
coef(model_logit)
exp(12.04)exp(-4.02)^.05
exp(12.04)*exp(-4.02)^.05
exp(12.04)*exp(-4.02)^.05
exp(12.04)*exp(-4.02)^1
exp(12.04)*exp(-4.02)^1.5
exp(12.04)*exp(-4.02)^2.5
odds <- exp(12.04)*exp(-4.02)^2.5
odds <- exp(12.04)*exp(-4.02)^2.5
exp(12.04)*exp(-4.02)^2.5
exp(12.04)*exp(-4.02)^2.5 #odds
exp(12.04)*exp(-4.02)^3 #odds
coef(model_logit)
exp(12.04)*exp(-4.02)^2 #odds for 3000lb car
exp(12.04)*exp(-4.02)^3 #odds for 3000lb car
exp(12.04)*exp(-4.02)^4 #odds for 3000lb car
coef(model_logit)
exp(12.04)*exp(-4.02)^2.5 #odds for 3000lb car
exp(12.04)*exp(-4.02)^3 #odds for 3000lb car
exp(12.04)*exp(-4.02)^3.5 #odds for 3000lb car
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit),
"Probit" = MASS::dose.p(tr.probit),
"C-log-log" = MASS::dose.p(tr.cll))
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .5),
"Probit" = MASS::dose.p(tr.probit, p = .5),
"Cloglog" = MASS::dose.p(tr.cll), p = .5)
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .25),
"Probit" = MASS::dose.p(tr.probit, p = .25),
"Cloglog" = MASS::dose.p(tr.cll), p = .25)
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .5),
"Probit" = MASS::dose.p(tr.probit, p = .5),
"Cloglog" = MASS::dose.p(tr.cll), p = .5)
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .25),
"Probit" = MASS::dose.p(tr.probit, p = .25),
"Cloglog" = MASS::dose.p(tr.cll), p = .95)
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .25),
"Probit" = MASS::dose.p(tr.probit, p = .25),
"Cloglog" = MASS::dose.p(tr.cll), p = .999)
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .25),
"Probit" = MASS::dose.p(tr.probit, p = .25),
"Cloglog" = MASS::dose.p(tr.cll), p = .5)
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .25),
"Probit" = MASS::dose.p(tr.probit, p = .25),
"Cloglog" = MASS::dose.p(tr.cll), p = .25)
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .5),
"Probit" = MASS::dose.p(tr.probit, p = .5),
"Cloglog" = MASS::dose.p(tr.cll), p = .5)
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .25),
"Probit" = MASS::dose.p(tr.probit, p = .25),
"Cloglog" = MASS::dose.p(tr.cll), p = .25)
ED50s
ED50s <- cbind("Logit" = MASS::dose.p(tr.logit, p = .25),
"Probit" = MASS::dose.p(tr.probit, p = .25),
"Cloglog" = MASS::dose.p(tr.cll), p = .25)
ED50s
tr.logit <- glm( am ~  wt, family = binomial,
data = mtcars)
tr.probit <- update( tr.logit, family=binomial(link="probit") )
tr.cll <- update( tr.logit, family=binomial(link="cloglog") )
tr.array <- rbind( coef(tr.logit), coef(tr.probit), coef(tr.cll))
tr.array <- cbind( tr.array, c(deviance(tr.logit),
deviance(tr.probit), deviance(tr.cll)) )
colnames(tr.array) <- c("Intercept", "Weight","Residual dev.")
rownames(tr.array) <- c("Logit","Probit","Comp log-log")
tr.array
tr.logit <- glm( am ~  wt, family = binomial(link = "logit"),
data = mtcars)
tr.probit <- update( tr.logit, family=binomial(link="probit") )
tr.cll <- update( tr.logit, family=binomial(link="cloglog") )
tr.array <- rbind( coef(tr.logit), coef(tr.probit), coef(tr.cll))
tr.array <- cbind( tr.array, c(deviance(tr.logit),
deviance(tr.probit), deviance(tr.cll)) )
colnames(tr.array) <- c("Intercept", "Weight","Residual dev.")
rownames(tr.array) <- c("Logit","Probit","Comp log-log")
tr.array
knitr::include_graphics("cloglog.png")
lines( newP.logit ~ newHrs, lty=1, lwd=2, col = "red")
newHrs <- seq( 1, 6, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Weight (1000lbs)", ylab="Proportion of Manuel Cars")
lines( newP.logit ~ newHrs, lty=1, lwd=2, col = "red")
lines( newP.probit ~ newHrs, lty=2, lwd=2)
lines( newP.cll ~ newHrs, lty=4, lwd=2)
legend("bottomleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
data(mtcars)
newHrs <- seq( 1, 6, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Weight (1000lbs)", ylab="Proportion of Manuel Cars")
lines( newP.logit ~ newHrs, lty=1, lwd=2, col = "red")
lines( newP.probit ~ newHrs, lty=2, lwd=2, col="blue")
lines( newP.cll ~ newHrs, lty=4, lwd=2, col= "green")
legend("bottomleft", lwd=2, lty=c(1, 2, 4),
legend=c("Logit","Probit","Comp. log-log"))
data(mtcars)
legend("bottomleft", lwd=2, lty=c(1, 2, 4), col = c("red", "blue", "green"),
legend=c("Logit","Probit","Comp. log-log"))
newHrs <- seq( 1, 6, length=100)
newdf <- data.frame(wt=newHrs)
newP.logit <- predict( tr.logit, newdata=newdf, type="response")
newP.probit <- predict( tr.probit, newdata=newdf, type="response")
newP.cll <- predict( tr.cll, newdata=newdf, type="response")
plot(am ~  wt,
data = mtcars,
xlim=c(0, 6), ylim=c(0, 1),
xlab="Weight (1000lbs)", ylab="Proportion of Manuel Cars")
lines( newP.logit ~ newHrs, lty=1, lwd=2, col = "red")
lines( newP.probit ~ newHrs, lty=2, lwd=2, col="blue")
lines( newP.cll ~ newHrs, lty=4, lwd=2, col= "green")
legend("bottomleft", lwd=2, lty=c(1, 2, 4), col = c("red", "blue", "green"),
legend=c("Logit","Probit","Comp. log-log"))
data(mtcars)
knitr::include_graphics("cloglog2.png")
